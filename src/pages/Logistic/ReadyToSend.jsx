import ExpandLessIcon from "@mui/icons-material/ExpandLess";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import SortIcon from "@mui/icons-material/Sort";
import {
  DataGrid,
  GridPagination,
  GridToolbarContainer,
  GridToolbarQuickFilter,
  gridPageCountSelector,
  isAutogeneratedRow,
  useGridApiContext,
  useGridSelector,
} from "@mui/x-data-grid";
import { useEffect, useState } from "react";
import MuiPagination from "@mui/material/Pagination";
import {
  Close,
  Cottage,
  Download,
  Edit,
  LocalShipping,
  Place,
  Refresh,
  Visibility,
} from "@mui/icons-material";
import {
  Button,
  IconButton,
  Tooltip,
  Typography,
  Modal,
  Box,
  Chip,
  Fab,
} from "@mui/material";
import LoadingScreenBlue from "../../components/ui/LoadingScreenBlue";
import { localDate, localDateTable } from "../../Utils/ConvertIsoDate";
import Grid from "@mui/material/Grid2";
import AssignRoute from "../MyStoreHouse/ AssignRoute";
import { blue, green, grey, pink } from "@mui/material/colors";
import { useUsers } from "../../hooks/useUsers";
import DetailAssignRoute from "../MyStoreHouse/DetailAssignRoute";
import { esES } from "@mui/x-data-grid/locales";
import { useMediaQuery } from "@mui/system";
import CustomNoRows from "../../components/Tables/CustomNoRows";

// Estilo para los modales
const style = {
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  width: 800,
  bgcolor: "background.paper",
  borderRadius: '15px',
  p: 4,
};

// Componente de paginación personalizada
function Pagination({ page, onPageChange, className }) {
  const apiRef = useGridApiContext();
  const pageCount = useGridSelector(apiRef, gridPageCountSelector);

  return (
    <MuiPagination
      color="primary"
      className={className}
      count={pageCount}
      page={page + 1}
      onChange={(event, newPage) => {
        onPageChange(event, newPage - 1);
      }}
    />
  );
}

// Iconos personalizados para el ordenamiento de columnas
export function SortedDescendingIcon() {
  return <ExpandMoreIcon className="icon" />;
}

export function SortedAscendingIcon() {
  return <ExpandLessIcon className="icon" />;
}

export function UnsortedIcon() {
  return <SortIcon className="icon" />;
}

// Componente de paginación personalizada para la tabla
function CustomPagination(props) {
  return <GridPagination ActionsComponent={Pagination} {...props} />;
}

// Componente principal que representa la tabla de "Listo para enviar"
const ReadyToSend = ({ rows = [], loading = false, type = 0 }) => {

  // Estados para manejar los modales y su contenido
  const [openModal, setOpenModal] = useState({ value: false, selectedPO: {}, updateUser: false, updateGuide: false });
  const [openDetail, setOpenDetail] = useState({ value: false, selectedPO: {} });
  const { loadCarrierDrivers, CarrierDrivers } = useUsers(); // Hook para cargar conductores de transportistas
  const isXs = useMediaQuery('(max-width:600px)'); // Verifica si la pantalla es pequeña
  const [columnVisibilityModel, setColumnVisibilityModel] = useState({
    typeDelivery: !isXs,
  });

  // Actualiza la visibilidad de las columnas según el tamaño de la pantalla
  useEffect(() => {
    setColumnVisibilityModel((prevModel) => ({
      ...prevModel,
      supply_date: !isXs,
      route_detail: !isXs,
      typeDelivery: !isXs,
    }));
  }, [isXs]);

  // Función para abrir el modal de asignación
  const handleOpen = (data) => {
    loadCarrierDrivers();
    if (data.typeDelivery === 'homedelivery') {
      setOpenModal({ value: true, selectedPO: { data }, updateGuide: true });
    } else {
      setOpenModal({ value: true, selectedPO: { data }, updateUser: true });
    }
  };

  // Función para abrir el modal de detalle
  const handleOpenDetail = (data) => {
    loadCarrierDrivers();
    setOpenDetail({ value: true, selectedPO: { data } });
  };

  // Función para abrir el modal de guía
  const handleOpenGuide = (data) => {
    setOpenModal({ value: true, selectedPO: { data }, updateGuide: true });
  };

  // Función para abrir el modal de usuario
  const handleOpenUser = (data) => {
    setOpenModal({ value: true, selectedPO: { data }, updateUser: true });
  };

  // Función para cerrar el modal de asignación
  const handleClose = () => setOpenModal({ value: false, selectedPO: {} });

  // Función para cerrar el modal de detalle
  const handleCloseDetail = () => setOpenDetail({ value: false, selectedPO: {} });

  // Barra de herramientas personalizada para la tabla
  function CustomToolbar() {
    const apiRef = useGridApiContext();

    return (
      <GridToolbarContainer sx={{ justifyContent: "center" }}>
        <GridToolbarQuickFilter placeholder="Buscar" variant="outlined" />
      </GridToolbarContainer>
    );
  }

  // Muestra una pantalla de carga si los datos están cargando
  if (loading) return <LoadingScreenBlue />;

  // Renderiza un chip según el estado del detalle de la ruta
  const renderChip = (data) => {
    if (!!data.route_detail === false) {
      return (
        <Chip variant="outlined" label='No asignada' sx={{ bgcolor: grey[200] }} />
      );
    } else if (!!data.route_detail.guide === true) {
      return (
        <Chip variant="outlined" label='Asignada a compañía' sx={{ bgcolor: blue[400] }} />
      );
    } else {
      return (
        <Chip variant="outlined" label='Asignada a usuario' sx={{ bgcolor: green[500] }} />
      );
    }
  };

  // Renderiza las opciones de acción según el estado del detalle de la ruta
  const renderOptions = (data) => {
    if (!!data.route_detail === false) {
      return [
        <Tooltip title="Asignar compañía de envíos">
          <Button
            aria-label="Asignar envío"
            color="success"
            startIcon={<LocalShipping />}
            onClick={() => handleOpen(data)}
          >
            Asignar
          </Button>
        </Tooltip>,
        <Tooltip title="Ver detalle">
          <IconButton
            aria-label="Ver detalle"
            color="primary"
            onClick={() => handleOpenDetail(data)}
          >
            <Visibility />
          </IconButton>
        </Tooltip>,
      ];
    } else if (!!data.route_detail.guide === true) {
      return [
        <Tooltip title="Editar guía de envío">
          <Button
            aria-label="Editar guía"
            color="info"
            onClick={() => handleOpenGuide(data)}
            startIcon={<Edit />}
          >
            Editar
          </Button>
        </Tooltip>,
        <Tooltip title="Ver detalle">
          <IconButton
            aria-label="Ver detalle"
            color="primary"
            onClick={() => handleOpenDetail(data)}
          >
            <Visibility />
          </IconButton>
        </Tooltip>,
      ];
    } else {
      return [
        <Tooltip title="Cambiar usuario">
          <Button
            aria-label="Cambiar usuario"
            color="info"
            onClick={() => handleOpenUser(data, true)}
            startIcon={<Edit />}
          >
            Editar
          </Button>
        </Tooltip>,
        <Tooltip title="Ver detalle">
          <IconButton
            aria-label="Ver detalle"
            color="primary"
            onClick={() => handleOpenDetail(data)}
          >
            <Visibility />
          </IconButton>
        </Tooltip>,
      ];
    }
  };

  // Configuración de las columnas de la tabla
  const columns = [
    {
      field: "date",
      headerName: "Fecha",
      flex: 0.5,
      align: "center",
      renderCell: (params) => {
        const date = localDateTable(params.row.createdAt);
        const day = date.split("/")[0];
        const month = date.split("/")[1];
        return (
          <Typography variant="h6" fontSize={14} color="initial">
            {day} <br />
            {month}
          </Typography>
        );
      },
    },
    {
      field: "order_id",
      hideable: false,
      headerName: "Folio",
      flex: 0.5,
      sortable: false,
    },
    {
      field: "supply_date",
      headerName: "Fecha de empaque",
      flex: 1,
      align: "center",
      renderCell: (params) => localDate(params.row.supply_detail[0].date),
    },
    {
      field: "route_detail",
      headerName: "Detalle de ruta",
      flex: 1,
      hideable: type === 0 ? false : true,
      align: "center",
      renderCell: (params) =>
        renderChip(params.row),
    },
    {
      field: "typeDelivery",
      headerName: "Tipo de envío",
      flex: 0.5,
      align: "center",
      renderCell: (params) => params.row.typeDelivery === 'homedelivery' ?
        <Tooltip title='Domicilio'><Cottage sx={{ color: pink[800] }} /></Tooltip> :
        <Tooltip title='Punto de entrega'><Place color="secondary" /></Tooltip>,
    },
    {
      field: "Opciones",
      headerName: "Opciones",
      align: "center",
      flex: 1,
      sortable: false,
      type: "actions",
      getActions: (params) => renderOptions(params.row),
    },
  ];

  return (
    <Grid container gap={2} maxWidth={"85vw"}>
      <DataGrid
        sx={{
          fontSize: "12px",
          fontFamily: "sans-serif",
          borderRadius: { xs: '5px', md: '20px' },
          bgcolor: "#fff",
          border: "1px solid rgb(209, 205, 205)",
          "& .MuiDataGrid-cell": {
            borderBottom: "1px solid rgb(230, 223, 223)",
          },
        }}
        rows={rows}
        columns={columns}
        autoHeight
        pagination
        columnVisibilityModel={columnVisibilityModel}
        onColumnVisibilityModelChange={setColumnVisibilityModel}
        slots={{
          pagination: CustomPagination,
          toolbar: CustomToolbar,
          columnSortedDescendingIcon: SortedDescendingIcon,
          columnSortedAscendingIcon: SortedAscendingIcon,
          columnUnsortedIcon: UnsortedIcon,
          noRowsOverlay: CustomNoRows,
        }}
        disableColumnFilter
        disableColumnMenu
        disableColumnSelector
        disableDensitySelector
        localeText={esES.components.MuiDataGrid.defaultProps.localeText}
        slotProps={{
          toolbar: {
            showQuickFilter: true,
            quickFilterProps: { debounceMs: 500 },
          },
        }}
        printOptions={{
          hideFooter: true,
          hideToolbar: true,
        }}
      />

      {/* Modal para asignar rutas */}
      <Modal
        open={openModal.value}
        onClose={(event, reason) => {
          if (reason !== 'backdropClick') {
            handleClose(event);  // Solo cerrar si no es un clic en el backdrop
          }
        }}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <Box sx={{ ...style }}>
          <AssignRoute productOrder={openModal.selectedPO} handleClose={handleClose} carrierDrivers={CarrierDrivers} updateUser={openModal.updateUser} updateGuide={openModal.updateGuide} />
        </Box>
      </Modal>

      {/* Modal para mostrar detalles */}
      <Modal
        open={openDetail.value}
        onClose={(event, reason) => {
          if (reason !== 'backdropClick') {
            handleClose(event);  // Solo cerrar si no es un clic en el backdrop
          }
        }}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <Box sx={{ ...style }}>
          <Button
            onClick={() => handleCloseDetail()}
            sx={{ position: 'absolute', top: 20, right: 10 }}
          >
            <Close />
          </Button>
          <DetailAssignRoute productOrder={openDetail.selectedPO} carrierDrivers={CarrierDrivers} />
        </Box>
      </Modal>
    </Grid>
  );
};

export default ReadyToSend;
